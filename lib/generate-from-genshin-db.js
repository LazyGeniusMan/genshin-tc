const db = require('genshin-db');
const fs = require('fs');
const csv = require('fast-csv');
const path = require('path');

module.exports ={
    //Get data from genshin-db
    getData : function (type, query, level, ascended) {
        switch (type) {
            case 'character':
                return db.characters(query, { matchCategories: true });
                break;
            case 'character-stats':
                return db.characters(query).stats(level, ascended);
                break;
            case 'character-talents':
                return db.talents(query);
                break;    
            case 'weapon':
                return db.weapons(query, { matchCategories: true });
                break;
            case 'weapon-stats':
                return db.weapons(query).stats(level, ascended);
                break;
            default:
                break;
        }
    },
    //Generate All CSV files from data generated by genshin-db
    generateCSVData : function (type) {
        switch (type) {
            case 'character-stats':
                //List names that will be generated
                var names = module.exports.getData('character', 'names');
                module.exports.generateCharaStats(names, type);
                break;
            case 'character-talents':
                break;    
            case 'weapon-stats':
                break;
            case 'weapon-passive':
                break;
            default:
                break;
        }
    },
    //Generate characters stats data for CSV files
    generateCharaStats : function (names, type) {
        //Map for rename csv header
        let keyHeader = new Map();
        keyHeader.set('level', 'Level');
        keyHeader.set('ascension', 'Ascension');
        keyHeader.set('hp', 'HP');
        keyHeader.set('attack', 'ATK');
        keyHeader.set('defense', 'DEF');
        keyHeader.set('substat', 'Ascension Stat');
        keyHeader.set('specialized', 'Ascension Value');
        //Generate every characters stats data names.length
        for (let i = 0; i < 1; i++) {
            const charaName = names[i];
            let charaMetadata = module.exports.getData('character', charaName);
            let charaStats = [];
            //Generate every level of a character stats data
            for (let level = 1; level <= 90; level++) {
                let tempStats = module.exports.getData(type, charaName, level);
                //Add character ascension stat to tempStats object
                Object.assign(tempStats, {'substat' : charaMetadata.substat});
                //Rename object keys for CSV header
                for (let [key, value] of keyHeader.entries()) {
                    module.exports.renameObjectKey(tempStats, key, value);
                }
                //Add character stats to an array
                charaStats.push(tempStats);
                //Check if we need to add stats after ascended
                if ([20, 40, 50, 60, 70, 80].includes(level)) {
                    let tempStat = module.exports.getData(type, charaMetadata.name, level, '+');
                    Object.assign(tempStat, {'substat' : charaMetadata.substat});
                    for (let [key, value] of keyHeader.entries()) {
                        module.exports.renameObjectKey(tempStat, key, value);
                    }
                    charaStats.push(tempStat);
                }
            }
            //Write CSV file
            module.exports.writeCSV(type, charaStats, charaMetadata);
        }
    },
    //Write CSV file
    writeCSV : function (type, charaStats, charaMetadata) {
        let rootPath = path.dirname(require.main.filename);
        switch (type) {
            case 'character-stats':
                var filename = 'stats';
                var filePath = rootPath.concat('\\data\\characters\\', charaMetadata.element.toLowerCase(), '\\', charaMetadata.name.toLowerCase(),'\\', filename ,'.csv');
                //Create folder and delete file if exists
                module.exports.prepareFolder(filePath);
                //Write CSV file
                var ws = fs.createWriteStream(filePath, {flags: 'a'});
                const csvStream = csv.format({ headers: true });
                csvStream.pipe(ws).on('end', () => process.exit());
                for(let ele of charaStats) {
                	csvStream.write(ele);                    
                }
                csvStream.end();
                break;
            case 'character-talents':
                break;    
            case 'weapon-stats':
                break;
            case 'weapon-passive':
                break;
            default:
                break;
        }
        
    },
    //Create folder and delete file if exists
    prepareFolder : function (filePath) {
        //Create folder based on file path
        try {
            if (!fs.existsSync(path.dirname(filePath))) {
                fs.mkdirSync(path.dirname(filePath), { recursive: true })
            }
        } catch (err) {
            console.error(err)
            }
        //Delete file if exists
        try {
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
                }
        } catch (err) {
            console.error(err)
        }        
    },
    //Rename object key
    renameObjectKey : function (objectName, oldKey, newKey) {
        delete Object.assign(objectName, {[newKey]: objectName[oldKey] })[oldKey];
    }
}