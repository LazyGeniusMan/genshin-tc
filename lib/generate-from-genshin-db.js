const core = require('./core.js');
const db = require('genshin-db');
const fs = require('fs');
const csv = require('fast-csv');
const path = require('path');
const statsMap = {
    'Anemo DMG Bonus' : 'anemo_dmg',
    'ATK' : 'atk%',
    'CRIT DMG' : 'crit_dmg',
    'CRIT Rate' : 'crit_rate',
    'Cryo DMG Bonus' : 'cryo_dmg',
    'DEF' : 'def%',
    'Dendro DMG Bonus' : 'dendro_dmg',
    'Electro DMG Bonus' : 'electro_dmg',
    'Elemental Mastery' : 'em',
    'Energy Recharge' : 'er',
    'Geo DMG Bonus' : 'geo_dmg',
    'Healing Bonus' : 'healing_bonus',
    'HP' : 'hp%',
    'Hydro DMG Bonus' : 'hydro_dmg',
    'Physical DMG Bonus' : 'physical_dmg',
    'Pyro DMG Bonus' : 'pyro_dmg',
};

//Get data from genshin-db
function getData(type, query, level, ascended) {
    switch (type) {
        case 'character':
            return db.characters(query, { matchCategories: true });
            break;
        case 'character-stats':
            return db.characters(query).stats(level, ascended);
            break;
        case 'character-talents':
            return db.talents(query);
            break;    
        case 'weapon':
            return db.weapons(query, { matchCategories: true });
            break;
        case 'weapon-stats':
            return db.weapons(query).stats(level, ascended);
            break;
        default:
            break;
    }
}

//Generate All CSV files from data generated by genshin-db
function generateCSVData(type) {
    switch (type) {
        case 'character-stats':
            //Map for rename and order CSV header
            var keysMap = {
                level: 'level',
                ascension: 'ascension',
                hp: 'base_hp',
                attack: 'base_atk',
                defense: 'base_def',
                substat: 'ascension_stat',
                specialized: 'ascension_value'
            };
            var rootPath = path.dirname(require.main.filename);
            var filename = 'stats';
            //List names that will be generated
            var charaNames = getData('character', 'names');
            for(let charaName of charaNames){
                let charaMetadata = getData('character', charaName);
                let charaStats = generateCharaStats(keysMap, charaMetadata);
                var filePath = rootPath.concat('\\data\\characters\\', charaMetadata.element.toLowerCase(), '\\', charaMetadata.name.toLowerCase().replace(/ /g,"_"),'\\', filename ,'.csv');
                writeCSV(charaStats, filePath);
            }
            //Generate template
            let charaMetadata = {
                element : '_elemenType',
                name    : '_characterName',
                substat : 'CRIT DMG',
            }
            let charaStats =[];
            let tempCharaStats = getData('character-stats', 'Hu Tao', '1');
            Object.assign(tempCharaStats, {'substat' : charaMetadata.substat});
            tempCharaStats['substat']=statsMap[tempCharaStats.substat];
            tempCharaStats = core.renameKeys(keysMap, tempCharaStats);
            tempCharaStats = core.orderKeys(Object.values(keysMap), tempCharaStats);
            charaStats.push(tempCharaStats);
            var filePath = rootPath.concat('\\data\\characters\\', charaMetadata.element.toLowerCase(), '\\', charaMetadata.name.toLowerCase().replace(/ /g,"_"),'\\', filename ,'.csv');
            writeCSV(charaStats, filePath);
            break;
        case 'character-talents':
            break;    
        case 'weapon-stats':
            //Map for rename and order CSV header
            var keysMap = {
                level: 'level',
                ascension: 'ascension',
                attack: 'base_atk',
                substat: 'substat',
                specialized: 'substat_value'
            };
            var rootPath = path.dirname(require.main.filename);
            var filename = 'stats';
            //List names that will be generated
            var weaponNames = getData('weapon', 'names');
            for(let weaponName of weaponNames){
                let weaponMetadata = getData('weapon', weaponName);
                let weaponStats = generateWeaponStats(keysMap, weaponMetadata);
                var filePath = rootPath.concat('\\data\\weapons\\', weaponMetadata.weapontype.toLowerCase(), '\\', weaponMetadata.name.toLowerCase().replace(/ /g,"_"),'\\', filename ,'.csv');
                writeCSV(weaponStats, filePath);
            }
            //Generate template
            let weaponMetadata = {
                weapontype : '_weaponType',
                name    : '_weaponName',
                substat : 'CRIT DMG',
            }
            let weaponStats =[];
            let tempWeaponStats = getData('weapon-stats', 'Homa', '1');
            Object.assign(tempWeaponStats, {'substat' : weaponMetadata.substat});
            tempWeaponStats['substat']=statsMap[tempWeaponStats.substat];
            tempWeaponStats = core.renameKeys(keysMap, tempWeaponStats);
            tempWeaponStats = core.orderKeys(Object.values(keysMap), tempWeaponStats);
            weaponStats.push(tempWeaponStats);
            var filePath = rootPath.concat('\\data\\weapons\\', weaponMetadata.weapontype.toLowerCase(), '\\', weaponMetadata.name.toLowerCase().replace(/ /g,"_"),'\\', filename ,'.csv');
            writeCSV(weaponStats, filePath);
            break;
        case 'weapon-passive':
            break;
        default:
            break;
    }
}

//Generate characters stats data for CSV files
function generateCharaStats(keysMap, charaMetadata) {
    let charaStats = [];
    //Generate every level of a character stats data
    for (let level = 1; level <= 90; level++) {
        let tempCharaStats = getData('character-stats', charaMetadata.name, level);
        //Add character ascension stat to tempCharaStats object
        Object.assign(tempCharaStats, {'substat' : charaMetadata.substat});
        //Change value based on statsMap
        tempCharaStats['substat']=statsMap[tempCharaStats.substat];
        //Rename object keys for CSV header
        tempCharaStats = core.renameKeys(keysMap, tempCharaStats);
        //Order object keys
        tempCharaStats = core.orderKeys(Object.values(keysMap), tempCharaStats);
        //Add character stats to an array
        charaStats.push(tempCharaStats);
        //Check if we need to add stats after ascended
        if ([20, 40, 50, 60, 70, 80].includes(level)) {
            let tempCharaStat = getData('character-stats', charaMetadata.name, level, '+');
            Object.assign(tempCharaStat, {'substat' : charaMetadata.substat});
            tempCharaStat['substat']=statsMap[tempCharaStat.substat];
            tempCharaStat = core.renameKeys(keysMap, tempCharaStat);
            tempCharaStat = core.orderKeys(Object.values(keysMap), tempCharaStat);
            charaStats.push(tempCharaStat);
        }
    }
    return charaStats;
}

//Generate weapons stats data for CSV files
function generateWeaponStats(keysMap, weaponMetadata) {
    //Generate every characters stats data
    let weaponStats = [];
    //Generate every level of a character stats data
    for (let level = 1; level <= 90; level++) {
        try {
            let tempWeaponStats = getData('weapon-stats', weaponMetadata.name, level);
            //Add character ascension stat to tempWeaponStats object
            Object.assign(tempWeaponStats, {'substat' : weaponMetadata.substat});
            //Change value based on statsMap
            tempWeaponStats['substat']=statsMap[tempWeaponStats.substat];
            //Rename object keys for CSV header
            tempWeaponStats = core.renameKeys(keysMap, tempWeaponStats);
            //Order object keys
            tempWeaponStats = core.orderKeys(Object.values(keysMap), tempWeaponStats);
            //Add character stats to an array
            weaponStats.push(tempWeaponStats);
            //Check if we need to add stats after ascended
            if ([20, 40, 50, 60, 70, 80].includes(level)) {
                let tempWeaponStat = getData('weapon-stats', weaponMetadata.name, level, '+');
                Object.assign(tempWeaponStat, {'substat' : weaponMetadata.substat});
                tempWeaponStat['substat']=statsMap[tempWeaponStat.substat];
                tempWeaponStat = core.renameKeys(keysMap, tempWeaponStat);
                tempWeaponStat = core.orderKeys(Object.values(keysMap), tempWeaponStat);
                weaponStats.push(tempWeaponStat);
            } 
        } catch (err) {
            //console.error(err)
        }
    }
    return weaponStats;
}

//Write CSV file
function writeCSV(data, filePath) {
    //Create folder based on file path if not exists
    core.createFolder(path.dirname(filePath));
    //Clear file content if exists
    core.clearFileContent(filePath);
    //Write CSV file
    var ws = fs.createWriteStream(filePath, {flags: 'a'});
    const csvStream = csv.format({ headers: true });
    csvStream.pipe(ws).on('end', () => process.exit());
    for(let ele of data) {
        csvStream.write(ele);                    
    }
    csvStream.end();    
}

module.exports ={
    generateCSVData : generateCSVData,
}