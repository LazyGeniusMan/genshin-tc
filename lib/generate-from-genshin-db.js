const db = require('genshin-db');
const fs = require('fs');
const csv = require('fast-csv');
const path = require('path');
const findreplace = require('replace-in-file');

//Get data from genshin-db
function getData(type, query, level, ascended) {
    switch (type) {
        case 'character':
            return db.characters(query, { matchCategories: true });
            break;
        case 'character-stats':
            return db.characters(query).stats(level, ascended);
            break;
        case 'character-talents':
            return db.talents(query);
            break;    
        case 'weapon':
            return db.weapons(query, { matchCategories: true });
            break;
        case 'weapon-stats':
            return db.weapons(query).stats(level, ascended);
            break;
        default:
            break;
    }
}

//Generate All CSV files from data generated by genshin-db
function generateCSVData(type) {
    switch (type) {
        case 'character-stats':
            //List names that will be generated
            var names = getData('character', 'names');
            generateCharaStats(names, type);
            break;
        case 'character-talents':
            break;    
        case 'weapon-stats':
            break;
        case 'weapon-passive':
            break;
        default:
            break;
    }
}

//Generate characters stats data for CSV files
function generateCharaStats(names, type) {
    //Map for rename and order CSV header
    let keysMap = {
        level: 'level',
        ascension: 'ascension',
        hp: 'hp',
        attack: 'atk',
        defense: 'def',
        substat: 'ascension_stat',
        specialized: 'ascension_value'
    };
    //Generate every characters stats data
    for (let i = 0; i < names.length; i++) {
        const charaName = names[i];
        let charaMetadata = getData('character', charaName);
        let charaStats = [];
        //Generate every level of a character stats data
        for (let level = 1; level <= 90; level++) {
            let tempStats = getData(type, charaName, level);
            //Add character ascension stat to tempStats object
            Object.assign(tempStats, {'substat' : charaMetadata.substat});
            //Rename object keys for CSV header
            tempStats = renameKeys(keysMap, tempStats);
            //Order object keys
            tempStats = orderKeys(Object.values(keysMap), tempStats);
            //Add character stats to an array
            charaStats.push(tempStats);
            //Check if we need to add stats after ascended
            if ([20, 40, 50, 60, 70, 80].includes(level)) {
                let tempStat = getData(type, charaMetadata.name, level, '+');
                Object.assign(tempStat, {'substat' : charaMetadata.substat});
                tempStat = renameKeys(keysMap, tempStat);
                tempStat = orderKeys(Object.values(keysMap), tempStat);
                charaStats.push(tempStat);
            }
        }
        //Write CSV file
        writeCSV(type, charaStats, charaMetadata);
    }
}

//Write CSV file
function writeCSV(type, charaStats, charaMetadata) {
    let rootPath = path.dirname(require.main.filename);
    switch (type) {
        case 'character-stats':
            var filename = 'stats';
            var filePath = rootPath.concat('\\data\\characters\\', charaMetadata.element.toLowerCase(), '\\', charaMetadata.name.toLowerCase(),'\\', filename ,'.csv');
            //Create folder and delete file content if exists
            prepareFolder(filePath);
            //Write CSV file
            var ws = fs.createWriteStream(filePath, {flags: 'a'});
            const csvStream = csv.format({ headers: true });
            csvStream.pipe(ws).on('end', () => process.exit());
            for(let ele of charaStats) {
                csvStream.write(ele);                    
            }
            csvStream.end();
            break;
        case 'character-talents':
            break;    
        case 'weapon-stats':
            break;
        case 'weapon-passive':
            break;
        default:
            break;
    }
    
}

//Create folder and delete file content if exists
function prepareFolder(filePath) {
    //Create folder based on file path
    try {
        if (!fs.existsSync(path.dirname(filePath))) {
            fs.mkdirSync(path.dirname(filePath), { recursive: true })
        }
    } catch (err) {
        console.error(err)
        }
    //Delete file if exists
    try {
        if (fs.existsSync(filePath)) {
            let options = {
                files: filePath,
                from: /.*/s,
                to: '',
              };
              try {
                findreplace.sync(options);
              }
              catch (err) {
                console.error('Error occurred:', err);
              }
            }
    } catch (err) {
        console.error(err)
    }        
}

//Rename object key
const renameKeys = (keysMap, obj) =>
  Object.keys(obj).reduce(
    (acc, key) => ({
      ...acc,
      ...{ [keysMap[key] || key]: obj[key] }
    }),
    {}
  );

//Change object key order
function orderKeys(newOrder, oldOrderObj) {
    console.log(newOrder);
    let newOrderObj = {}
    newOrder.forEach(ele => {
        newOrderObj[ele]= null
    });
    oldOrderObj = Object.assign(newOrderObj, oldOrderObj);
    console.log(oldOrderObj);
    return oldOrderObj;
}

module.exports ={
    generateCSVData : generateCSVData,
}